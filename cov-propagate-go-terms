#!/usr/bin/env python

## learned most goatools/python things from this great tutorial: GO Tutorial in Python - Solutions.ipynb, 
## which comes from here: http://gohandbook.org/doku.php ; and 
## https://nbviewer.jupyter.org/urls/dessimozlab.github.io/go-handbook/GO%20Tutorial%20in%20Python%20-%20Solutions.ipynb

from goatools import obo_parser
import argparse
import pandas as pd
import sys
import os


parser = argparse.ArgumentParser(description='This program takes the output table from `cov-combine-go-summaries-with-domains` \
                                              and returns a similar table, but with GO term counts propagated to all parents. See \
                                              https://hackmd.io/@astrobiomike/GO-summarize-with-domains-with-bit for example. For \
                                              version info, run `cov-version`.')

required = parser.add_argument_group('required arguments')

required.add_argument("-i", "--input", help="Input (output table from `cov-combine-go-summaries-with-domains`)", action="store", required=True)
parser.add_argument("-g", "--GO_obo_file", help='GO obo file to use (e.g. from: http://geneontology.org/docs/download-ontology/). By default will \
                                                 use "go-basic.obo". "goslim_metagenomics.obo" is also a pre-packaged option (enter `-g goslim_metagenomics` to specify it). Or \
                                                 a different obo-formatted file can be specified here (it should probably be the one the annotations are based off of, or were slimmed based on).',
                                                 action="store", dest="obo", default="go_basic")
parser.add_argument("--keep-zeroes", help="By default the program will remove any rows with GO terms with 0 counts assigned to them. Add this flag \
                                             to keep them.", action="store_true")
parser.add_argument("-o", "--output", help='Output file name (default: "GO-terms-propagated-to-parents.tsv").', action="store", default="GO-terms-propagated-to-parents.tsv")

args = parser.parse_args()

if len(sys.argv)==1:
    parser.print_help(sys.stderr)
    sys.exit(0)

### checking and setting up obo file location
go_data_dir = os.environ["GO_DB_DIR"]

if args.obo == "goslim_metagenomics":
    go_obo = go_data_dir + "goslim_metagenomics.obo"

elif args.obo == "go_basic":
    go_obo = go_data_dir + "go-basic.obo"

else:
    go_obo = args.obo

### loading GO database
print("\n\tGO obo file being used:")
go = obo_parser.GODag(go_obo, load_obsolete=True)
print("")


### making master table
  # for each GO term in the obo, want the ID, namespace, depth, and name 
  # function to get info for a go term:
def get_general_info(go_id):
    go_term = go[go_id]
    namespace = go_term.namespace
    name = go_term.name
    depth = go_term.depth

    # returns a list
    go_term_info = [go_id, namespace, depth, name]

    return go_term_info


# getting all unique GO terms
unique_GO_terms_set = set(go.keys())

## creating list then table of GO info for each term
table_list = [[]]

for GO_ID in unique_GO_terms_set:
    table_list.append(get_general_info(GO_ID))
    
table_list = list(filter(None, table_list)) # because i don't know how to initialize the list without it introducing a row of NAs...

header = ["GO_term", "namespace", "depth", "name"]
GO_df = pd.DataFrame(table_list, columns=header).sort_values(by=["depth"])

# setting GO_term to index so can use below
GO_df = GO_df.set_index(["GO_term"])


### reading in input table to dataframe
in_tab = pd.read_csv(args.input, sep="\t")

### getting list of count columns from input
target_columns = []
sample_columns = in_tab.columns.values[4:].tolist()

for col in sample_columns:
    if col.endswith("_counts"):
        target_columns.append(col)

print("\n\tPropagating term counts to their parents...\n")

### looping through count columns
for col in target_columns:
    
    # adding count column to master df with all 0s to start
    GO_df[col] = 0

    # making subset table of current
    curr_tab = in_tab[["GO_term", col]]
    
    # adding counts for primary term and all parents
    # iterating over current subset table
    for index, row in curr_tab.iterrows():
        term = row["GO_term"]
        count = row[col]
        
        # only moving forward if has counts
        if count > 0:
            # getting go obo object of term
            term_obj = go[term]
            # getting list of terms that need this count added to them (current term and all parents)
            terms_to_increase = [term] + list(term_obj.get_all_parents())
            
            # iterating over terms to increase and adding value
            for item in terms_to_increase:
                
                GO_df.at[item, col] += count
                
    # adding new percent column for those counts 
        ### ONE TERM ACROSS SAMPLE COMPARISON I THINK MAKES MORE SENSE THAN COMPARING WITHIN SAMPLES AFTER THIS PROPAGATION THING (MAYBE...)
       ### SO PERCENT COLUMNS ARE HERE, BUT I WOULD BE CAUTIOUS IN THINKING ABOUT THEM/USING THEM
    new_perc_col_name = col.replace("_counts", "_perc")
    curr_perc_df = pd.DataFrame({new_perc_col_name: GO_df[col] / GO_df[col].sum() * 100})
    GO_df = pd.concat([GO_df, curr_perc_df], axis=1)


if args.keep_zeroes:

    with open(args.output, "w") as out:
        out.write(GO_df.to_csv(sep="\t"))

else:
    # removing those with only zeroes in all samples
    GO_df = GO_df[GO_df.sum(axis=1) > 0]

    with open(args.output, "w") as out:
        out.write(GO_df.to_csv(sep="\t"))
